pipeline {
    agent any
    environment{
        DOCKER_IMAGE_NAME = 'mypythonimage'
        DOCKERFILE_PATH = 'Dockerfile'
        CONTAINER_NAME= 'pythonv2'
        
    }
    stages {
        stage('checkout'){
            steps{
                git 'https://github.com/rudravasu2021/DockerApp.git'
                
            }
        }
        stage('DockerBuild') {
            steps {
                script{
                    docker.build("rudravasu2021/${DOCKER_IMAGE_NAME}" , "-f ${DOCKERFILE_PATH} .")
                }
            }
        }
        stage('run conatiner'){
            steps{
                script{
                    // Check if the container exists
                    def containerExists = sh(script: "docker ps -a --format '{{.Names}}' | grep ${CONTAINER_NAME}", returnStatus: true)
                    
                    // Stop and remove the existing container if it exists
                    if (containerExists == 0) {
                        sh "docker stop ${CONTAINER_NAME}"
                        sh "docker rm ${CONTAINER_NAME}"
                    }
                    sh "docker run -d -p 8580:5000 --name ${CONTAINER_NAME} ${DOCKER_IMAGE_NAME}"
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    def trivyOutput = sh(script: "trivy image mypythonimage", returnStdout: true).trim()

                    echo "Trivy Scan Results:\n${trivyOutput}"

                    if (trivyOutput.contains("high vulnerabilities")) {
                        error "High vulnerabilities found. Build failed."
                    }
                }
            }
        }
         stage('Upload to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-cred', passwordVariable: 'ps', usernameVariable: 'us')]) {
                       // docker.withRegistry("https://index.docker.io/v1/", $ps, $us) {
                       //     docker.image("${wscat}").push("${esec-python-repo}")
                        //}
                        sh '''
                        docker login -u -p $ 
                        '''
                    }
                }
            }
        }
    }
}
